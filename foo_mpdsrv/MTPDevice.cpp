#include "MTPDevice.h"
#include "Win32Exception.h"
#include <algorithm>
#include <PortableDevice.h>
#include <PortableDeviceApi.h>
#include <PortableDeviceTypes.h>
#include <vector>

namespace foo_mtpsync
{
	const ULONG ToFetch = 16;

#define RETASSTRING(x) if(key == x) return #x;
	std::string PropToString(const PROPERTYKEY key)
	{
		RETASSTRING(WPD_AUDIO_BITRATE);
		RETASSTRING(WPD_AUDIO_BIT_DEPTH);
		RETASSTRING(WPD_AUDIO_BLOCK_ALIGNMENT);
		RETASSTRING(WPD_AUDIO_CHANNEL_COUNT);
		RETASSTRING(WPD_AUDIO_FORMAT_CODE);
		RETASSTRING(WPD_CLIENT_DESIRED_ACCESS);
		RETASSTRING(WPD_CLIENT_EVENT_COOKIE);
		RETASSTRING(WPD_CLIENT_MAJOR_VERSION);
		RETASSTRING(WPD_CLIENT_MINOR_VERSION);
		RETASSTRING(WPD_CLIENT_NAME);
		RETASSTRING(WPD_CLIENT_REVISION);
		RETASSTRING(WPD_CLIENT_SECURITY_QUALITY_OF_SERVICE);
		RETASSTRING(WPD_CLIENT_SHARE_MODE);
		RETASSTRING(WPD_CLIENT_WMDRM_APPLICATION_CERTIFICATE);
		RETASSTRING(WPD_CLIENT_WMDRM_APPLICATION_PRIVATE_KEY);
		RETASSTRING(WPD_COMMON_INFORMATION_BODY_TEXT);
		RETASSTRING(WPD_COMMON_INFORMATION_END_DATETIME);
		RETASSTRING(WPD_COMMON_INFORMATION_NOTES);
		RETASSTRING(WPD_COMMON_INFORMATION_PRIORITY);
		RETASSTRING(WPD_COMMON_INFORMATION_START_DATETIME);
		RETASSTRING(WPD_COMMON_INFORMATION_SUBJECT);
		RETASSTRING(WPD_DEVICE_DATETIME);
		RETASSTRING(WPD_DEVICE_FIRMWARE_VERSION);
		RETASSTRING(WPD_DEVICE_FRIENDLY_NAME);
		RETASSTRING(WPD_DEVICE_FUNCTIONAL_UNIQUE_ID);
		RETASSTRING(WPD_DEVICE_MANUFACTURER);
		RETASSTRING(WPD_DEVICE_MODEL);
		RETASSTRING(WPD_DEVICE_MODEL_UNIQUE_ID);
		RETASSTRING(WPD_DEVICE_NETWORK_IDENTIFIER);
		RETASSTRING(WPD_DEVICE_POWER_LEVEL);
		RETASSTRING(WPD_DEVICE_POWER_SOURCE);
		RETASSTRING(WPD_DEVICE_PROTOCOL);
		RETASSTRING(WPD_DEVICE_SERIAL_NUMBER);
		RETASSTRING(WPD_DEVICE_SERIAL_NUMBER);
		RETASSTRING(WPD_DEVICE_SUPPORTED_DRM_SCHEMES);
		RETASSTRING(WPD_DEVICE_SUPPORTED_FORMATS_ARE_ORDERED);
		RETASSTRING(WPD_DEVICE_SUPPORTS_NON_CONSUMABLE);
		RETASSTRING(WPD_DEVICE_SYNC_PARTNER);
		RETASSTRING(WPD_DEVICE_TRANSPORT);
		RETASSTRING(WPD_DEVICE_TYPE);
		RETASSTRING(WPD_DEVICE_USE_DEVICE_STAGE);
		RETASSTRING(WPD_MEDIA_ALBUM_ARTIST);
		RETASSTRING(WPD_MEDIA_ARTIST);
		RETASSTRING(WPD_MEDIA_BITRATE_TYPE);
		RETASSTRING(WPD_MEDIA_BUY_NOW);
		RETASSTRING(WPD_MEDIA_BYTE_BOOKMARK);
		RETASSTRING(WPD_MEDIA_COMPOSER);
		RETASSTRING(WPD_MEDIA_COPYRIGHT);
		RETASSTRING(WPD_MEDIA_DESCRIPTION);
		RETASSTRING(WPD_MEDIA_DESTINATION_URL);
		RETASSTRING(WPD_MEDIA_DURATION);
		RETASSTRING(WPD_MEDIA_EFFECTIVE_RATING);
		RETASSTRING(WPD_MEDIA_ENCODING_PROFILE);
		RETASSTRING(WPD_MEDIA_GENRE);
		RETASSTRING(WPD_MEDIA_GUID);
		RETASSTRING(WPD_MEDIA_HEIGHT);
		RETASSTRING(WPD_MEDIA_LAST_ACCESSED_TIME);
		RETASSTRING(WPD_MEDIA_LAST_BUILD_DATE);
		RETASSTRING(WPD_MEDIA_MANAGING_EDITOR);
		RETASSTRING(WPD_MEDIA_META_GENRE);
		RETASSTRING(WPD_MEDIA_OBJECT_BOOKMARK);
		RETASSTRING(WPD_MEDIA_OWNER);
		RETASSTRING(WPD_MEDIA_PARENTAL_RATING);
		RETASSTRING(WPD_MEDIA_RELEASE_DATE);
		RETASSTRING(WPD_MEDIA_SAMPLE_RATE);
		RETASSTRING(WPD_MEDIA_SAMPLE_RATE);
		RETASSTRING(WPD_MEDIA_SKIP_COUNT);
		RETASSTRING(WPD_MEDIA_SOURCE_URL);
		RETASSTRING(WPD_MEDIA_STAR_RATING);
		RETASSTRING(WPD_MEDIA_SUBSCRIPTION_CONTENT_ID);
		RETASSTRING(WPD_MEDIA_SUB_DESCRIPTION);
		RETASSTRING(WPD_MEDIA_SUB_TITLE);
		RETASSTRING(WPD_MEDIA_TIME_BOOKMARK);
		RETASSTRING(WPD_MEDIA_TIME_TO_LIVE);
		RETASSTRING(WPD_MEDIA_TITLE);
		RETASSTRING(WPD_MEDIA_TOTAL_BITRATE);
		RETASSTRING(WPD_MEDIA_USER_EFFECTIVE_RATING);
		RETASSTRING(WPD_MEDIA_USE_COUNT);
		RETASSTRING(WPD_MEDIA_WEBMASTER);
		RETASSTRING(WPD_MEDIA_WIDTH);
		RETASSTRING(WPD_STORAGE_ACCESS_CAPABILITY);
		RETASSTRING(WPD_STORAGE_CAPACITY);
		RETASSTRING(WPD_STORAGE_CAPACITY_IN_OBJECTS);
		RETASSTRING(WPD_STORAGE_DESCRIPTION);
		RETASSTRING(WPD_STORAGE_FILE_SYSTEM_TYPE);
		RETASSTRING(WPD_STORAGE_FREE_SPACE_IN_BYTES);
		RETASSTRING(WPD_STORAGE_FREE_SPACE_IN_OBJECTS);
		RETASSTRING(WPD_STORAGE_MAX_OBJECT_SIZE);
		RETASSTRING(WPD_STORAGE_SERIAL_NUMBER);
		RETASSTRING(WPD_STORAGE_TYPE);
		RETASSTRING(WPD_OBJECT_BACK_REFERENCES);
		RETASSTRING(WPD_OBJECT_CAN_DELETE);
		RETASSTRING(WPD_OBJECT_CONTAINER_FUNCTIONAL_OBJECT_ID);
		RETASSTRING(WPD_OBJECT_CONTENT_TYPE);
		RETASSTRING(WPD_OBJECT_DATE_AUTHORED);
		RETASSTRING(WPD_OBJECT_DATE_CREATED);
		RETASSTRING(WPD_OBJECT_DATE_MODIFIED);
		RETASSTRING(WPD_OBJECT_FORMAT);
		RETASSTRING(WPD_OBJECT_GENERATE_THUMBNAIL_FROM_RESOURCE);
		RETASSTRING(WPD_OBJECT_HINT_LOCATION_DISPLAY_NAME);
		RETASSTRING(WPD_OBJECT_ID);
		RETASSTRING(WPD_OBJECT_ISHIDDEN);
		RETASSTRING(WPD_OBJECT_ISSYSTEM);
		RETASSTRING(WPD_OBJECT_IS_DRM_PROTECTED);
		RETASSTRING(WPD_OBJECT_KEYWORDS);
		RETASSTRING(WPD_OBJECT_LANGUAGE_LOCALE);
		RETASSTRING(WPD_OBJECT_NAME);
		RETASSTRING(WPD_OBJECT_NON_CONSUMABLE);
		RETASSTRING(WPD_OBJECT_ORIGINAL_FILE_NAME);
		RETASSTRING(WPD_OBJECT_PARENT_ID);
		RETASSTRING(WPD_OBJECT_PERSISTENT_UNIQUE_ID);
		RETASSTRING(WPD_OBJECT_REFERENCES);
		RETASSTRING(WPD_OBJECT_SIZE);
		RETASSTRING(WPD_OBJECT_SYNC_ID);
		RETASSTRING(WPD_FUNCTIONAL_OBJECT_CATEGORY);
		RETASSTRING(WPD_RENDERING_INFORMATION_PROFILES);
		RETASSTRING(WPD_RENDERING_INFORMATION_PROFILE_ENTRY_CREATABLE_RESOURCES);
		RETASSTRING(WPD_RENDERING_INFORMATION_PROFILE_ENTRY_TYPE);
		throw std::runtime_error("LOOL");
	}

	MTPDevice::MTPDevice()
	{
		CComPtr<IPortableDeviceManager> dev;
		dev.CoCreateInstance(CLSID_PortableDeviceManager);
		DWORD numDevices = 0;
		HRESULT hr = dev->GetDevices(NULL, &numDevices);
		std::vector<LPWSTR> devIds(numDevices);
		hr = dev->GetDevices(&devIds[0], &numDevices);

		// TODO: Device selection
		WCHAR buf[255];
		DWORD size = 255;
		Id = devIds[0];
		dev->GetDeviceDescription(Id.c_str(), buf, &size);
		Description = buf;
		size = 255;
		dev->GetDeviceFriendlyName(Id.c_str(), buf, &size);
		FriendlyName = buf;
		size = 255;
		dev->GetDeviceManufacturer(Id.c_str(), buf, &size);
		Manufacturer = buf;

		std::for_each(devIds.begin(), devIds.end(), [](LPWSTR str) { CoTaskMemFree(str); });
	}

	void MTPDevice::Sync()
	{
		CComPtr<IPortableDeviceValues> vals;
		vals.CoCreateInstance(CLSID_PortableDeviceValues);
		CComPtr<IPortableDevice> dev;
		dev.CoCreateInstance(CLSID_PortableDevice);
		dev->Open(Id.c_str(), vals);

		CComPtr<IPortableDeviceContent> cont;
		dev->Content(&cont);
		CComPtr<IEnumPortableDeviceObjectIDs> objects;
		cont->EnumObjects(0, WPD_DEVICE_OBJECT_ID, vals, &objects);

		//CComPtr<IPortableDeviceKeyCollection> toRetrieve;
		//toRetrieve.CoCreateInstance(CLSID_PortableDeviceKeyCollection);
		//toRetrieve->Add(WPD_OBJECT_NAME);
		//toRetrieve->Add(WPD_OBJECT_FORMAT);
		//toRetrieve->Add(WPD_OBJECT_CONTENT_TYPE);
		//toRetrieve->Add(WPD_OBJECT_ORIGINAL_FILE_NAME);
		CComPtr<IPortableDeviceProperties> props;
		cont->Properties(&props);
		ULONG fetched;
		LPWSTR objBuf[ToFetch];
		objects->Next(ToFetch, objBuf, &fetched);
		while(fetched > 0)
		{
			for(size_t i = 0;
				i < fetched;
				++i)
			{
				CComPtr<IPortableDeviceValues> propVals;
				HRESULT hr = props->GetValues(objBuf[i], NULL, &propVals);
				DWORD count;
				propVals->GetCount(&count);
				for(DWORD k = 0; k < count; ++k)
				{
					PROPERTYKEY key;
					PROPVARIANT var;
					propVals->GetAt(k, &key, &var);
					std::string keyStr = PropToString(key);
					keyStr = keyStr;
					//MessageBoxW(NULL, , L"HIHI", 0);
				}
			}
			objects->Next(ToFetch, objBuf, &fetched);
		}
	}

	std::wstring MTPDevice::GetStorageObject(CComPtr<IPortableDeviceContent>& content)
	{
		CComPtr<IPortableDeviceProperties> props;
		content->Properties(&props);

		CComPtr<IPortableDeviceKeyCollection> toRetrieve;
		HRESULT hr = S_OK;
		hr = toRetrieve.CoCreateInstance(CLSID_PortableDeviceKeyCollection);
		if(FAILED(hr))
			throw Win32Exception();
		hr = toRetrieve->Add(WPD_OBJECT_CONTENT_TYPE);
		if(FAILED(hr))
			throw Win32Exception();
		hr = toRetrieve->Add(WPD_FUNCTIONAL_OBJECT_CATEGORY);
		if(FAILED(hr))
			throw Win32Exception();

		CComPtr<IEnumPortableDeviceObjectIDs> subRootIds;
		content->EnumObjects(0, WPD_DEVICE_OBJECT_ID, NULL, &subRootIds);
		DWORD numFetched;
		LPWSTR objBuf[ToFetch];
		subRootIds->Next(ToFetch, objBuf, &numFetched);
		while(numFetched > 0)
		{
			for(size_t i = 0; i < numFetched; ++i)
			{
				CComPtr<IPortableDeviceValues> propVals;
				HRESULT hr = props->GetValues(objBuf[i], toRetrieve, &propVals);
				DWORD count;
				propVals->GetCount(&count);
				for(DWORD k = 0; k < count; ++k)
				{
					PROPERTYKEY key;
					PROPVARIANT var;
					propVals->GetAt(k, &key, &var);
					std::string keyStr = PropToString(key);
					keyStr = keyStr;
					//MessageBoxW(NULL, , L"HIHI", 0);
				}
			}
		}
		throw std::runtime_error("Could not find storage on chosen device");
	}

	std::wstring MTPDevice::GetRootFolderObject(CComPtr<IPortableDeviceContent>& props)
	{
	}
}